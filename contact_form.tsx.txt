import React, { useState } from 'react';
import { Mail, User, Phone, MessageSquare, Send, MapPin, Clock, Check, X } from 'lucide-react';

const ContactForm = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null); // 'success', 'error', or null
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    subject: '',
    message: ''
  });

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitStatus(null);

    // Basic validation
    if (!formData.name || !formData.email || !formData.message) {
      alert('Please fill in all required fields');
      setIsSubmitting(false);
      return;
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      alert('Please enter a valid email address');
      setIsSubmitting(false);
      return;
    }

    try {
      // Simulate API call - Replace this with your actual email service
      await simulateEmailSend(formData);
      
      setSubmitStatus('success');
      setFormData({ name: '', email: '', phone: '', subject: '', message: '' });
      
      // Auto-hide success message after 3 seconds
      setTimeout(() => {
        setSubmitStatus(null);
      }, 3000);
      
    } catch (error) {
      console.error('Error sending message:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Simulate email sending - Replace with actual implementation
  const simulateEmailSend = (data) => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // This is where you'd integrate with your email service
        console.log('Email data to send:', data);
        
        // For demonstration, we'll simulate success
        // In real implementation, you'd call your email service here:
        // - EmailJS: emailjs.send(service_id, template_id, data)
        // - Formspree: fetch('https://formspree.io/f/YOUR_FORM_ID', {...})
        // - Custom backend API
        
        resolve('Message sent successfully');
      }, 2000);
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4">
      {/* Toggle Button */}
      {!isVisible && (
        <button
          onClick={() => setIsVisible(true)}
          className="fixed bottom-6 right-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white p-4 rounded-full shadow-2xl transform hover:scale-110 transition-all duration-300 z-50 animate-pulse"
        >
          <MessageSquare size={24} />
        </button>
      )}

      {/* Contact Form Modal */}
      {isVisible && (
        <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-gray-800 bg-opacity-95 backdrop-blur-lg rounded-2xl shadow-2xl w-full max-w-2xl transform transition-all duration-300 border border-gray-700 max-h-[90vh] overflow-y-auto">
            {/* Header */}
            <div className="flex justify-between items-center p-6 border-b border-gray-700">
              <div>
                <h2 className="text-3xl font-bold text-white mb-2">Get in Touch</h2>
                <p className="text-gray-300">We'd love to hear from you. Send us a message!</p>
              </div>
              <button
                onClick={() => setIsVisible(false)}
                className="text-gray-400 hover:text-white transition-colors duration-200 p-2 hover:bg-gray-700 rounded-lg"
              >
                <X size={24} />
              </button>
            </div>

            <div className="p-6">
              {/* Contact Info Cards */}
              <div className="grid md:grid-cols-3 gap-4 mb-8">
                <div className="bg-gray-700 bg-opacity-50 rounded-xl p-4 text-center border border-gray-600">
                  <Mail className="mx-auto mb-3 text-blue-400" size={24} />
                  <h3 className="text-white font-semibold mb-1">Email</h3>
                  <p className="text-gray-300 text-sm">hello@example.com</p>
                </div>
                <div className="bg-gray-700 bg-opacity-50 rounded-xl p-4 text-center border border-gray-600">
                  <Phone className="mx-auto mb-3 text-green-400" size={24} />
                  <h3 className="text-white font-semibold mb-1">Phone</h3>
                  <p className="text-gray-300 text-sm">+1 (555) 123-4567</p>
                </div>
                <div className="bg-gray-700 bg-opacity-50 rounded-xl p-4 text-center border border-gray-600">
                  <Clock className="mx-auto mb-3 text-purple-400" size={24} />
                  <h3 className="text-white font-semibold mb-1">Response Time</h3>
                  <p className="text-gray-300 text-sm">Within 24 hours</p>
                </div>
              </div>

              {/* Success/Error Messages */}
              {submitStatus && (
                <div className={`mb-6 p-4 rounded-xl border ${
                  submitStatus === 'success' 
                    ? 'bg-green-900 bg-opacity-50 border-green-500 text-green-300' 
                    : 'bg-red-900 bg-opacity-50 border-red-500 text-red-300'
                }`}>
                  <div className="flex items-center gap-3">
                    {submitStatus === 'success' ? (
                      <Check size={20} className="text-green-400" />
                    ) : (
                      <X size={20} className="text-red-400" />
                    )}
                    <span className="font-medium">
                      {submitStatus === 'success' 
                        ? 'Message sent successfully! We\'ll get back to you soon.' 
                        : 'Failed to send message. Please try again.'}
                    </span>
                  </div>
                </div>
              )}

              {/* Form */}
              <div className="space-y-6">
                {/* Name and Email Row */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                    <input
                      type="text"
                      name="name"
                      placeholder="Your Name *"
                      value={formData.name}
                      onChange={handleInputChange}
                      className="w-full pl-12 pr-4 py-4 bg-gray-700 bg-opacity-50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                      required
                    />
                  </div>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                    <input
                      type="email"
                      name="email"
                      placeholder="Your Email *"
                      value={formData.email}
                      onChange={handleInputChange}
                      className="w-full pl-12 pr-4 py-4 bg-gray-700 bg-opacity-50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                      required
                    />
                  </div>
                </div>

                {/* Phone and Subject Row */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="relative">
                    <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                    <input
                      type="tel"
                      name="phone"
                      placeholder="Phone Number (Optional)"
                      value={formData.phone}
                      onChange={handleInputChange}
                      className="w-full pl-12 pr-4 py-4 bg-gray-700 bg-opacity-50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    />
                  </div>
                  <div className="relative">
                    <MessageSquare className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                    <input
                      type="text"
                      name="subject"
                      placeholder="Subject"
                      value={formData.subject}
                      onChange={handleInputChange}
                      className="w-full pl-12 pr-4 py-4 bg-gray-700 bg-opacity-50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    />
                  </div>
                </div>

                {/* Message */}
                <div className="relative">
                  <textarea
                    name="message"
                    placeholder="Your Message *"
                    value={formData.message}
                    onChange={handleInputChange}
                    rows="6"
                    className="w-full p-4 bg-gray-700 bg-opacity-50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 resize-none"
                    required
                  ></textarea>
                  <div className="absolute bottom-3 right-3 text-gray-500 text-sm">
                    {formData.message.length}/500
                  </div>
                </div>

                {/* Submit Button */}
                <button
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className={`w-full py-4 px-6 rounded-xl font-semibold text-white transition-all duration-200 flex items-center justify-center gap-3 ${
                    isSubmitting
                      ? 'bg-gray-600 cursor-not-allowed opacity-70'
                      : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 transform hover:scale-105 shadow-lg'
                  }`}
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      Sending Message...
                    </>
                  ) : (
                    <>
                      <Send size={20} />
                      Send Message
                    </>
                  )}
                </button>

                {/* Footer Note */}
                <div className="text-center">
                  <p className="text-gray-400 text-sm">
                    * Required fields. We'll respond within 24 hours.
                  </p>
                  <p className="text-gray-500 text-xs mt-2">
                    Your information is secure and will never be shared with third parties.
                  </p>
                </div>
              </div>

              {/* Integration Instructions */}
              <div className="mt-8 p-4 bg-blue-900 bg-opacity-30 border border-blue-500 rounded-xl">
                <h4 className="text-blue-300 font-semibold mb-2">📧 Email Integration Setup</h4>
                <p className="text-blue-200 text-sm mb-2">
                  To receive emails in your mailbox, you need to integrate with an email service:
                </p>
                <ul className="text-blue-200 text-xs space-y-1 ml-4">
                  <li>• <strong>EmailJS:</strong> Free tier, client-side email sending</li>
                  <li>• <strong>Formspree:</strong> Simple form backend service</li>
                  <li>• <strong>Netlify Forms:</strong> If hosting on Netlify</li>
                  <li>• <strong>Custom Backend:</strong> Node.js with Nodemailer/SendGrid</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ContactForm;